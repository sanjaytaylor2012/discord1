generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}


model Profile {
  id String @id @default(uuid())
  userId String @unique
  name String
  imageUrl String @db.Text
  email String @db.Text

  servers Server[] //servers that the user is a moderator of
  members Member[] //list of memberships the user has
  channels Channel[] //list of channels the user is in

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text
  inviteCode String @unique

//id of the user that created the server
  profileId String

//each server is associated with one profile (the creator)
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

//list of members of the server
  members Member[]

//list of channels that are a part of the server
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])

}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id String @id @default(uuid())
  role MemberRole @default(GUEST)

//id of the profile of the member
  profileId String

//profile associated with the member
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

//id of the server that this membership is for
  serverId String

//the server that the member is in
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsRecieved Conversation[] @relation("MemberTwo")


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])

}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id String @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

//profile info for the user that created the channel?
  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

//server info for which server the channel is in
  serverId String
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)


//all messages in channel
  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])

}

//used for communication in channel
model Message {
  id String @id @default(uuid())
  content String @db.Text
  fileUrl String? @db.Text


  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)


//contains relation: many messages => one channel
  channelId String
  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@index([channelId])
  @@index([memberId])

}

//used for the one on one chat feature

model Conversation {
  id String @id @default(uuid())

//id of the member that initiated the conversation
  memberOneId String
  memberOne Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)


//id of the member that was invited to conversation
  memberTwoId String
  memberTwo Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

//list of direct messages in the conversation
  directMessages DirectMessage[]

  @@index([memberOneId])
  @@index([memberTwoId])

  
//ensures that we have only one conversation for two people
  @@unique([memberOneId, memberTwoId])

}

//same as channel messages but has relation for 1-on-1 conversation instead
model DirectMessage {
  id String @id @default(uuid())
  content String @db.Text
  fileUrl String? @db.Text


  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)


  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@index([conversationId])
  @@index([memberId])

}